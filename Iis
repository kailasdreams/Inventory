import logging
import requests
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = FastAPI()

# Shared user credentials (Store securely in environment variables)
USERNAME = "admin"  # Replace with your F5 username
PASSWORD = "kailas@123"  # Replace with your F5 password

# List of F5 device hosts
F5_HOSTS = [
    "10.1.1.11",  # Replace with actual IPs
]

# Disable SSL warnings
requests.packages.urllib3.disable_warnings()


def fetch_f5_data(url, auth):
    """Generic function to fetch F5 API data."""
    try:
        response = requests.get(url, auth=auth, verify=False)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logger.error(f"Error fetching data from {url}: {e}")
        return None


def get_hostname_status(host, auth):
    url = f"https://{host}/mgmt/tm/sys/global-settings"
    data = fetch_f5_data(url, auth)
    return data.get("hostname", "Unknown") if data else "Unknown"


def get_serial_number(host, auth):
    url = f"https://{host}/mgmt/tm/sys/hardware"
    data = fetch_f5_data(url, auth)
    if not data:
        return "Unknown"
    
    entries = data.get("entries", {})
    hardware_entry = entries.get("https://localhost/mgmt/tm/sys/hardware/0", {})
    nested_stats = hardware_entry.get("nestedStats", {}).get("entries", {})
    return nested_stats.get("chassisSerialNumber", {}).get("description", "Unknown")


def get_failover_status(host, auth):
    url = f"https://{host}/mgmt/tm/sys/failover"
    data = fetch_f5_data(url, auth)
    if not data:
        return "Unknown"
    
    failover_state = data.get("apiRawValues", {}).get("apiAnonymous", "Unknown")
    return "Active" if "active" in failover_state.lower() else "Standby" if "standby" in failover_state.lower() else "Unknown"


def get_f5_inventory():
    all_vip_data = []
    auth = (USERNAME, PASSWORD)
    headers = {"Content-Type": "application/json"}

    for host in F5_HOSTS:
        failover_status = get_failover_status(host, auth)
        hostname = get_hostname_status(host, auth)
        serial_number = get_serial_number(host, auth)

        try:
            vip_url = f"https://{host}/mgmt/tm/ltm/virtual"
            vip_data = fetch_f5_data(vip_url, auth)
            vips = vip_data.get("items", []) if vip_data else []

            for vip in vips:
                destination = vip.get("destination", "Unknown").split("/")[-1]
                vip_ip, vip_port = destination.split(':') if ':' in destination else ("Unknown", 0)

                all_vip_data.append({
                    "lb_ip": host,
                    "failover_status": failover_status,
                    "vip_name": vip.get("name"),
                    "hostname": hostname,
                    "serial_number": serial_number,
                    "vip_ip": vip_ip,
                    "vip_port": int(vip_port),
                    "state": vip.get("state", "Unknown"),
                    "pool_name": vip.get("pool", "No Pool"),
                })
        except Exception as e:
            logger.error(f"Error processing F5 host {host}: {e}")

    return {"vips": all_vip_data}


@app.get("/")
async def home():
    inventory = get_f5_inventory()
    if not inventory["vips"]:
        raise HTTPException(status_code=500, detail="Failed to retrieve F5 inventory.")
    return inventory


@app.get("/api/inventory")
async def api_inventory():
    inventory = get_f5_inventory()
    if not inventory["vips"]:
        return JSONResponse(content={"error": "Failed to retrieve F5 inventory."}, status_code=500)
    return inventory


# Run the app using Uvicorn (not needed for IIS)
# uvicorn filename:app --host 0.0.0.0 --port 5000
